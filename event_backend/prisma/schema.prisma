// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String
  email      String  @unique
  password   String
  role       Role    @default(USER)
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event                Event[]
  sent_invitations     Invitation[]  @relation("SentInvitations")
  received_invitations Invitation[]  @relation("ReceivedInvitations")
  review               Review[]
  Participant          Participant[]
  Payment              Payment[]

  @@map("users")
}

model Event {
  id          String      @id @default(uuid())
  title       String
  description String
  date_time   DateTime
  location    String
  fee         Float       @default(0)
  is_paid     Boolean
  is_private  Boolean
  type        EventType
  status      EventStatus @default(UPCOMING)
  is_deleted  Boolean     @default(false)

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invitation  Invitation[]
  review      Review[]
  Participant Participant[]
  Payment     Payment[]

  @@map("events")
}

model Invitation {
  id          String     @id @default(uuid())
  event_id    String
  sender_id   String
  receiver_id String
  status      JoinStatus @default(PENDING)
  created_at  DateTime   @default(now())
  is_deleted  Boolean    @default(false)
  event       Event      @relation(fields: [event_id], references: [id])
  sender      User       @relation("SentInvitations", fields: [sender_id], references: [id])
  receiver    User       @relation("ReceivedInvitations", fields: [receiver_id], references: [id])
}

model Participant {
  id              String         @id @default(uuid())
  event_id        String
  user_id         String
  payment_status  PaymentStatus
  approval_status ApprovalStatus
  is_banned       Boolean        @default(false)
  joined_at       DateTime       @default(now())

  event Event @relation(fields: [event_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@map("participants")
}

model Review {
  id         String   @id @default(uuid())
  user_id    String
  event_id   String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)
  user       User     @relation(fields: [user_id], references: [id])
  event      Event    @relation(fields: [event_id], references: [id])

  @@unique([user_id, event_id])
  @@index([event_id])
  @@index([user_id])
  @@map("reviews")
}

model Payment {
  id             String        @id @default(uuid())
  user_id        String
  event_id       String
  amount         Decimal
  status         PaymentStatus @default(PENDING)
  transaction_id String        @unique
  gateway_data   Json?
  paid_at        DateTime      @default(now())

  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@map("payments")
}

enum EventStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}

enum EventType {
  PUBLIC_FREE
  PUBLIC_PAID
  PRIVATE_FREE
  PRIVATE_PAID
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FREE
  FAILED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
